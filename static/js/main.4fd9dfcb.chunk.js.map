{"version":3,"sources":["store/tezosStore.ts","store/index.ts","ui/components/buttons.ts","ui/pages/main/styled.ts","ui/pages/main/index.tsx","ui/index.tsx","reportWebVitals.ts","index.tsx"],"names":["TezosStore","address","balance","connected","makeAutoObservable","this","autoBind","a","TempleWallet","isAvailable","Error","wallet","connect","tezos","toTezos","pkh","tz","getBalance","runInAction","toString","RootStore","tezosStore","RootStoreContext","createContext","BaseButton","styled","div","PageContainer","InfoLine","ConnectWalletMenuContainer","DicesAnchor","observer","useContext","onClick","id","style","position","bottom","rollADie","element","document","getElementById","numberOfDice","soundVolume","delay","callback","GlobalStyle","createGlobalStyle","rootStore","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wVAGaA,EAAb,WAKE,aAAe,yBAJfC,QAAU,GAII,KAHdC,QAAU,GAGI,KAFdC,WAAY,EAGVC,YAAmBC,KAAM,GAAI,CAAEC,UAAU,IAN7C,kFASE,yCAAAC,EAAA,0DACMF,KAAKF,UADX,iEAI0BK,IAAaC,cAJvC,uCAMU,IAAIC,MAAM,+BANpB,cAQQC,EAAS,IAAIH,IAAa,UARlC,UASQG,EAAOC,QAAQ,cATvB,eAUQC,EAAQF,EAAOG,UAVvB,UAYwBD,EAAMF,OAAOI,MAZrC,eAYQd,EAZR,iBAawBY,EAAMG,GAAGC,WAAWhB,GAb5C,QAaQC,EAbR,OAeEgB,aAAY,WACV,EAAKjB,QAAUA,EACf,EAAKC,QAAUA,EAAQiB,WACvB,EAAKhB,UAAYQ,EAAOR,aAlB5B,iDATF,6DCCMiB,E,sCACJC,WAAyB,IAAIrB,GAGlBsB,EAAmBC,wBAAyB,IAAIH,GAE9CA,I,yBCRFI,EAAaC,IAAOC,IAAV,4QCAVC,EAAgBF,IAAOC,IAAV,2PAYbE,EAAWH,IAAOC,IAAV,oFAQRG,EAA6BJ,IAAOC,IAAV,kJAS1BI,EAAcL,IAAOC,IAAV,0B,OCjBTK,eAAS,WAAO,IACrBV,EHNwBW,qBAAWV,GGMnCD,WAER,OACE,eAACM,EAAD,WACE,eAACE,EAAD,WACE,eAACD,EAAD,uBAAoBP,EAAWpB,WAC/B,eAAC2B,EAAD,uBAAoBP,EAAWnB,WAC/B,cAACsB,EAAD,CAAYS,QAASZ,EAAWT,QAAhC,SACGS,EAAWlB,UAAY,YAAc,eAGzCkB,EAAWlB,WACV,qCACE,cAAC2B,EAAD,CAAaI,GAAG,mBAChB,cAACV,EAAD,CACEW,MAAO,CACLC,SAAU,WACVC,OAAQ,QAEVJ,QAAS,WACPK,IAAS,CACPC,QAASC,SAASC,eAAe,kBACjCC,aAAc,EACdC,YAAa,GACbC,MAAO,IACPC,SAAU,gBAXhB,kCCvBJC,EAAcC,YAAH,mTASXC,EAAY,IAAI5B,EAEP,aACb,OACE,qCACE,cAAC0B,EAAD,IACA,cAACxB,EAAiB2B,SAAlB,CAA2BC,MAAOF,EAAlC,SACE,cAAC,EAAD,UCROG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASC,eAAe,SAM1BU,K","file":"static/js/main.4fd9dfcb.chunk.js","sourcesContent":["import { makeAutoObservable, runInAction } from \"mobx\";\nimport { TempleWallet } from \"@temple-wallet/dapp\";\n\nexport class TezosStore {\n  address = \"\";\n  balance = \"\";\n  connected = false;\n\n  constructor() {\n    makeAutoObservable(this, {}, { autoBind: true });\n  }\n\n  async connect() {\n    if (this.connected) {\n      return;\n    }\n    const available = await TempleWallet.isAvailable();\n    if (!available) {\n      throw new Error(\"Temple Wallet not installed\");\n    }\n    const wallet = new TempleWallet(\"Farkle\");\n    await wallet.connect(\"granadanet\");\n    const tezos = wallet.toTezos();\n\n    const address = await tezos.wallet.pkh();\n    const balance = await tezos.tz.getBalance(address);\n\n    runInAction(() => {\n      this.address = address;\n      this.balance = balance.toString();\n      this.connected = wallet.connected;\n    });\n  }\n}\n","import { useContext, createContext } from \"react\";\n\nimport { TezosStore } from \"./tezosStore\";\n\nclass RootStore {\n  tezosStore: TezosStore = new TezosStore();\n}\n\nexport const RootStoreContext = createContext<RootStore>(new RootStore());\nexport const useAppStores = () => useContext(RootStoreContext);\nexport default RootStore;\n","import styled from \"styled-components\";\n\nexport const BaseButton = styled.div`\n  line-height: 50px;\n  padding: 0 15px 0 15px;\n  color: black;\n  border-radius: 5px;\n  border: 1px solid black;\n  width: auto;\n  background-color: red;\n  text-align: center;\n  cursor: pointer;\n\n  :hover {\n    color: white;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const PageContainer = styled.div`\n  position: relative;\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nexport const InfoLine = styled.div`\n  cursor: pointer;\n\n  :hover {\n    color: red;\n  }\n`;\n\nexport const ConnectWalletMenuContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  position: absolute;\n  top: 0;\n  right: 0;\n`;\n\nexport const DicesAnchor = styled.div``;\n","import { observer } from \"mobx-react-lite\";\n// @ts-ignore;\nimport rollADie from \"roll-a-die\";\n\nimport { BaseButton } from \"ui/components\";\nimport { useAppStores } from \"store\";\n\nimport {\n  PageContainer,\n  InfoLine,\n  ConnectWalletMenuContainer,\n  DicesAnchor,\n} from \"./styled\";\n\nexport default observer(() => {\n  const { tezosStore } = useAppStores();\n\n  return (\n    <PageContainer>\n      <ConnectWalletMenuContainer>\n        <InfoLine>Address: {tezosStore.address}</InfoLine>\n        <InfoLine>Balance: {tezosStore.balance}</InfoLine>\n        <BaseButton onClick={tezosStore.connect}>\n          {tezosStore.connected ? \"Connected\" : \"Connect\"}\n        </BaseButton>\n      </ConnectWalletMenuContainer>\n      {tezosStore.connected && (\n        <>\n          <DicesAnchor id=\"dicesContainer\" />\n          <BaseButton\n            style={{\n              position: \"absolute\",\n              bottom: \"10px\",\n            }}\n            onClick={() => {\n              rollADie({\n                element: document.getElementById(\"dicesContainer\"),\n                numberOfDice: 6,\n                soundVolume: 0.3,\n                delay: 100000,\n                callback: () => {},\n              });\n            }}\n          >\n            Roll a dice\n          </BaseButton>\n        </>\n      )}\n    </PageContainer>\n  );\n});\n","import { createGlobalStyle } from \"styled-components\";\n\nimport RootStore, { RootStoreContext } from \"store\";\n\nimport { MainPage } from \"./pages\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nconst rootStore = new RootStore();\n\nexport default () => {\n  return (\n    <>\n      <GlobalStyle />\n      <RootStoreContext.Provider value={rootStore}>\n        <MainPage />\n      </RootStoreContext.Provider>\n    </>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './ui';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}