{"version":3,"sources":["store/tezosStore.ts","store/index.ts","ui/components/buttons.ts","game/index.ts","ui/components/game/gameScene.tsx","ui/pages/main/styled.ts","ui/pages/main/index.tsx","ui/index.tsx","reportWebVitals.ts","index.tsx"],"names":["TezosStore","address","balance","connected","makeAutoObservable","this","autoBind","a","TempleWallet","isAvailable","Error","wallet","connect","tezos","toTezos","pkh","tz","getBalance","runInAction","toString","RootStore","tezosStore","RootStoreContext","createContext","BaseButton","styled","div","FarkleGame","gameWindowId","Phaser","Game","type","AUTO","parent","width","height","physics","default","arcade","gravity","y","scene","preload","load","setBaseURL","image","create","emitter","add","particles","createEmitter","speed","scale","start","end","blendMode","logo","setVelocity","setBounce","setCollideWorldBounds","startFollow","onSceneCreate","GameScene","useEffect","id","style","PageContainer","InfoLine","ConnectWalletMenuContainer","GameFrame","observer","useContext","position","right","onClick","bottom","GlobalStyle","createGlobalStyle","rootStore","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6119c183.chunk.js","sourcesContent":["import { makeAutoObservable, runInAction } from \"mobx\";\nimport { TempleWallet } from \"@temple-wallet/dapp\";\n\nexport class TezosStore {\n  address = \"\";\n  balance = \"\";\n  connected = false;\n\n  constructor() {\n    makeAutoObservable(this, {}, { autoBind: true });\n  }\n\n  async connect() {\n    if (this.connected) {\n      return;\n    }\n    const available = await TempleWallet.isAvailable();\n    if (!available) {\n      throw new Error(\"Temple Wallet not installed\");\n    }\n    const wallet = new TempleWallet(\"Farkle\");\n    await wallet.connect(\"granadanet\");\n    const tezos = wallet.toTezos();\n\n    const address = await tezos.wallet.pkh();\n    const balance = await tezos.tz.getBalance(address);\n\n    runInAction(() => {\n      this.address = address;\n      this.balance = balance.toString();\n      this.connected = wallet.connected;\n    });\n  }\n}\n","import { useContext, createContext } from \"react\";\n\nimport { TezosStore } from \"./tezosStore\";\n\nclass RootStore {\n  tezosStore: TezosStore = new TezosStore();\n}\n\nexport const RootStoreContext = createContext<RootStore>(new RootStore());\nexport const useAppStores = () => useContext(RootStoreContext);\nexport default RootStore;\n","import styled from \"styled-components\";\n\nexport const BaseButton = styled.div`\n  line-height: 50px;\n  padding: 0 15px 0 15px;\n  color: black;\n  border-radius: 5px;\n  border: 1px solid black;\n  width: auto;\n  background-color: red;\n  text-align: center;\n  cursor: pointer;\n\n  :hover {\n    color: white;\n  }\n`;\n","import Phaser from \"phaser\";\n\nconst onScenePreload = (scene: Phaser.Scene) => {\n  scene.load.setBaseURL(\"https://labs.phaser.io\");\n  scene.load.image(\"logo\", \"assets/sprites/phaser3-logo.png\");\n  scene.load.image(\"red\", \"assets/particles/red.png\");\n};\n\nconst onSceneCreate = (scene: Phaser.Scene) => {\n  const particles = scene.add.particles(\"red\");\n\n  const emitter = particles.createEmitter({\n    speed: 100,\n    scale: { start: 1, end: 0 },\n    blendMode: \"ADD\",\n  });\n\n  const logo = scene.physics.add.image(400, 100, \"logo\");\n\n  logo.setVelocity(100, 200);\n  logo.setBounce(1, 1);\n  logo.setCollideWorldBounds(true);\n\n  emitter.startFollow(logo);\n};\n\nexport class FarkleGame {\n  start(gameWindowId: string) {\n    new Phaser.Game({\n      type: Phaser.AUTO,\n      parent: gameWindowId,\n      width: \"100\",\n      height: \"100\",\n      physics: {\n        default: \"arcade\",\n        arcade: {\n          gravity: { y: 900 },\n        },\n      },\n      scene: {\n        preload: function () {\n          onScenePreload(this);\n        },\n        create: function () {\n          onSceneCreate(this);\n        },\n      },\n    });\n  }\n}\n","import { FarkleGame } from \"game\";\nimport { useEffect } from \"react\";\n\nconst gameWindowId = \"gameWindow\";\n\nexport const GameScene = () => {\n  useEffect(() => {\n    new FarkleGame().start(gameWindowId);\n  }, []);\n  return (\n    <div\n      id={gameWindowId}\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n      }}\n    />\n  );\n};\n","import styled from \"styled-components\";\n\nexport const PageContainer = styled.div`\n  position: relative;\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nexport const InfoLine = styled.div`\n  cursor: pointer;\n  font-size: 14px;\n  margin-right: 10px;\n\n  :hover {\n    color: red;\n  }\n`;\n\nexport const ConnectWalletMenuContainer = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100vw;\n  height: 12vh;\n`;\n\nexport const GameFrame = styled.div`\n  position: relative;\n  width: 80vw;\n  height: 76vh;\n  border: 5px solid white;\n  background-color: grey;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import { observer } from \"mobx-react-lite\";\n\nimport { BaseButton } from \"ui/components\";\nimport { useAppStores } from \"store\";\nimport { GameScene } from \"ui/components/game/gameScene\";\n\nimport {\n  PageContainer,\n  InfoLine,\n  ConnectWalletMenuContainer,\n  GameFrame,\n} from \"./styled\";\n\nexport default observer(() => {\n  const { tezosStore } = useAppStores();\n\n  return (\n    <PageContainer>\n      <ConnectWalletMenuContainer>\n        <InfoLine>Address: {tezosStore.address}</InfoLine>\n        <InfoLine>Balance: {tezosStore.balance}</InfoLine>\n        <BaseButton\n          style={{\n            position: \"absolute\",\n            right: \"0\",\n          }}\n          onClick={tezosStore.connect}\n        >\n          {tezosStore.connected ? \"Connected\" : \"Connect\"}\n        </BaseButton>\n      </ConnectWalletMenuContainer>\n      <GameFrame>\n        <GameScene />\n        <BaseButton\n          style={{\n            position: \"absolute\",\n            bottom: \"10px\",\n          }}\n        >\n          Roll a dice\n        </BaseButton>\n      </GameFrame>\n    </PageContainer>\n  );\n});\n","import { createGlobalStyle } from \"styled-components\";\n\nimport RootStore, { RootStoreContext } from \"store\";\n\nimport { MainPage } from \"./pages\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: 'Roboto', monospace;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n`;\n\nconst rootStore = new RootStore();\n\nexport default () => {\n  return (\n    <>\n      <GlobalStyle />\n      <RootStoreContext.Provider value={rootStore}>\n        <MainPage />\n      </RootStoreContext.Provider>\n    </>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './ui';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}