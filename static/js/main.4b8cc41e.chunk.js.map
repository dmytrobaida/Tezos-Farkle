{"version":3,"sources":["ui/components/buttons.ts","ui/pages/main/styled.ts","ui/pages/main/index.tsx","ui/index.tsx","reportWebVitals.ts","index.tsx"],"names":["BaseButton","styled","div","Container","InfoLine","useState","address","balance","walletInfo","setWalletInfo","connectHandler","useCallback","a","TempleWallet","isAvailable","Error","wallet","connect","tezos","toTezos","pkh","tz","getBalance","toNumber","onClick","GlobalStyle","createGlobalStyle","fallbackRender","error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6UAEaA,EAAaC,IAAOC,IAAV,4QCAVC,EAAYF,IAAOC,IAAV,oOAWTE,EAAWH,IAAOC,IAAV,8G,OCNN,aAAO,IAAD,EACiBG,mBAAS,CAC3CC,QAAS,GACTC,QAAS,IAHQ,mBACZC,EADY,KACAC,EADA,KAMbC,EAAiBC,sBAAW,sBAAC,kCAAAC,EAAA,sEACTC,IAAaC,cADJ,uCAGzB,IAAIC,MAAM,+BAHe,cAK3BC,EAAS,IAAIH,IAAa,UALC,SAM3BG,EAAOC,QAAQ,cANY,cAO3BC,EAAQF,EAAOG,UAPY,UAQXD,EAAMF,OAAOI,MARF,eAQ3Bd,EAR2B,iBASXY,EAAMG,GAAGC,WAAWhB,GATT,QAS3BC,EAT2B,OAWjCE,EAAc,CACZH,UACAC,QAASA,EAAQgB,aAbc,4CAehC,IAEH,OACE,eAACpB,EAAD,WACE,eAACC,EAAD,8BAAoBI,QAApB,IAAoBA,OAApB,EAAoBA,EAAYF,WAChC,eAACF,EAAD,8BAAoBI,QAApB,IAAoBA,OAApB,EAAoBA,EAAYD,WAChC,cAACP,EAAD,CAAYwB,QAASd,EAArB,yBC7BAe,EAAcC,YAAH,mTASF,aACb,OACE,qCACE,cAACD,EAAD,IACA,cAAC,gBAAD,CAAeE,eAAgB,gBAAGC,EAAH,EAAGA,MAAH,OAAe,8BAAMA,KAApD,SACE,cAAC,EAAD,UCLOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.4b8cc41e.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const BaseButton = styled.div`\n  line-height: 50px;\n  padding: 0 15px 0 15px;\n  color: black;\n  border-radius: 5px;\n  border: 1px solid black;\n  width: auto;\n  background-color: red;\n  text-align: center;\n  cursor: pointer;\n\n  :hover {\n    color: white;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nexport const InfoLine = styled.div`\n  margin-bottom: 10px;\n  cursor: pointer;\n  \n  :hover {\n    color: red;\n  }\n`;\n","import { useCallback, useState } from \"react\";\nimport { TempleWallet } from \"@temple-wallet/dapp\";\n\nimport { BaseButton } from \"ui/components\";\n\nimport { Container, InfoLine } from \"./styled\";\n\nexport default () => {\n  const [walletInfo, setWalletInfo] = useState({\n    address: \"\",\n    balance: 0,\n  });\n\n  const connectHandler = useCallback(async () => {\n    const available = await TempleWallet.isAvailable();\n    if (!available) {\n      throw new Error(\"Temple Wallet not installed\");\n    }\n    const wallet = new TempleWallet(\"Farkle\");\n    await wallet.connect(\"granadanet\");\n    const tezos = wallet.toTezos();\n    const address = await tezos.wallet.pkh();\n    const balance = await tezos.tz.getBalance(address);\n\n    setWalletInfo({\n      address,\n      balance: balance.toNumber(),\n    });\n  }, []);\n\n  return (\n    <Container>\n      <InfoLine>Address: {walletInfo?.address}</InfoLine>\n      <InfoLine>Balance: {walletInfo?.balance}</InfoLine>\n      <BaseButton onClick={connectHandler}>Connect</BaseButton>\n    </Container>\n  );\n};\n","import { createGlobalStyle } from \"styled-components\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nimport { MainPage } from \"./pages\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nexport default () => {\n  return (\n    <>\n      <GlobalStyle />\n      <ErrorBoundary fallbackRender={({ error }) => <div>{error}</div>}>\n        <MainPage />\n      </ErrorBoundary>\n    </>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './ui';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}